/*	Copyright (C) 2004 Garrett A. Kajmowicz
	This file is part of the uClibc++ Library.

	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 2.1 of the License, or (at your option) any later version.

	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	Lesser General Public License for more details.

	You should have received a copy of the GNU Lesser General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*/

#ifndef __STD_HEADER_UTILITY
#define __STD_HEADER_UTILITY 1

#include <basic_definitions>
#include <bits/reference_transformations.hpp>
#include <bits/pair.hpp>
#include <bits/swap.hpp>
#include <bits/type_traits_impl.hpp>
#include <bits/integer_sequence_impl.hpp>

#pragma GCC visibility push(default)

namespace std {

	namespace detail {
		template<typename T>
		struct identity {
	    	typedef T type;
		};
	}

	template <class T>
	inline constexpr T&& forward(typename std::remove_reference<T>::type& t) noexcept
	{
		return static_cast<T&&>(t);
	}

	template <class T>
	inline constexpr T&& forward(typename std::remove_reference<T>::type&& t) noexcept
	{
		static_assert(!std::is_lvalue_reference<T>::value, "Can not forward an rvalue as an lvalue.");
		return static_cast<T&&>(t);
	}
	template <typename T>
	constexpr typename remove_reference<T>::type&& move(T&& arg) noexcept
	{
		return static_cast<typename remove_reference<T>::type&&>(arg);
	}

}

#pragma GCC visibility pop

#endif	//__STD_HEADER_UTILITY
